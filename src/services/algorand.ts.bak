import algosdk from 'algosdk';
import { PropertyMetadata } from '../types';
import { Buffer } from 'buffer';

// Helper function to safely stringify objects that may contain BigInt values
function safeStringify(obj: any): string {
  return JSON.stringify(obj, (key, value) => {
    // Convert BigInt to String when serializing
    if (typeof value === 'bigint') {
      return value.toString();
    }
    return value;
  });
}

const algodClient = new algosdk.Algodv2(
  '',
  import.meta.env.VITE_ALGOD_NODE_URL,
  ''
);

const indexerClient = new algosdk.Indexer(
  '',
  import.meta.env.VITE_INDEXER_URL,
  ''
);

export class AlgorandService {
  static async getAccountAssets(address: string): Promise<any[]> {
    try {
      const accountInfo = await indexerClient.lookupAccountByID(address).do();
      return accountInfo.account.assets || [];
    } catch (error) {
      console.error('Error fetching account assets:', error);
      return [];
    }
  }

  static async getAssetInfo(assetId: number): Promise<any> {
    try {
      const assetInfo = await indexerClient.lookupAssetByID(assetId).do();
      return assetInfo.asset;
    } catch (error) {
      console.error('Error fetching asset info:', error);
      return null;
    }
  }

  static async getAssetTransactions(assetId: number): Promise<any[]> {
    try {
      const transactions = await indexerClient
        .lookupAssetTransactions(assetId)
        .limit(100)
        .do();
      return transactions.transactions || [];
    } catch (error) {
      console.error('Error fetching asset transactions:', error);
      return [];
    }
  }

  static async createTitle(
    account: string,
    landId: string,
    metadataUrl: string,
    peraWallet: any
  ): Promise<number> {
    try {
      console.log("Starting createTitle with account:", account);
      console.log("Land ID:", landId);
      console.log("Metadata URL:", metadataUrl);
      
      // Get transaction parameters
      const suggestedParams = await algodClient.getTransactionParams().do();
      console.log("Got suggested params:", safeStringify(suggestedParams));
      
      const appId = parseInt(import.meta.env.VITE_APP_ID || '0');
      console.log("Using app ID:", appId);

      if (!appId) {
        throw new Error('App ID not found in environment variables');
      }

      // Create the application call transaction
      console.log("Creating application call transaction...");
      
      // Create application args as Uint8Array
      const createTitleArg = new Uint8Array(Buffer.from('create_title'));
      const landIdArg = new Uint8Array(Buffer.from(landId));
      const metadataUrlArg = new Uint8Array(Buffer.from(metadataUrl));
      
      // Create the transaction object
      const appCallTxn = algosdk.makeApplicationCallTxnFromObject({
        sender: account,
        appIndex: appId,
        onComplete: algosdk.OnApplicationComplete.NoOpOC,
        appArgs: [createTitleArg, landIdArg, metadataUrlArg],
        suggestedParams: suggestedParams
      });

      console.log("Transaction created successfully");
      
      try {
        // Check if wallet is connected before signing
        if (!peraWallet || typeof peraWallet.signTransaction !== 'function') {
          console.error("PeraWallet not properly initialized or connected");
          console.log("PeraWallet object:", safeStringify(peraWallet));
          throw new Error('Wallet not connected or initialized properly');
        }
        
        // Sign the transaction using PeraWallet Connect
        console.log("Requesting signature from wallet...");
        console.log("About to call peraWallet.signTransaction with transaction");
        
        // Format the transaction according to Pera Wallet documentation
        // signTransaction expects SignerTransaction[][] format
        const txnToBeSigned = [{txn: appCallTxn, signers: [account]}];
        
        // Log the transaction before signing for debugging
        console.log("Transaction to be signed:", safeStringify(txnToBeSigned));
        
        // Sign the transaction
        const signedTxns = await peraWallet.signTransaction([[{txn: appCallTxn, signers: [account]}]]);
        console.log("Transaction signed successfully", safeStringify(signedTxns));
        
        if (!signedTxns || signedTxns.length === 0) {
          throw new Error('No signed transaction returned from wallet');
        }
        
        // Send the signed transaction
        console.log("Sending signed transaction to network...");
        
        // Process the signed transactions - Pera Wallet returns the raw signed transaction bytes
        const signedTxnToSend = signedTxns[0];
        
        // Send the transaction to the network
        const txId = await algodClient.sendRawTransaction(signedTxnToSend).do();
        console.log("Transaction sent with ID:", txId.txid);
        
        // Wait for confirmation
        console.log("Waiting for confirmation...");
        const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId.txid, 4);
        console.log("Transaction confirmed:", safeStringify(confirmedTxn));
        
        // Extract the created asset ID from the transaction
        const innerTxns = confirmedTxn.innerTxns || [];
        console.log("Inner transactions:", safeStringify(innerTxns));
        
        // Find the asset creation transaction
        let assetId = 0;
        for (const innerTxn of innerTxns) {
          const innerTxnAny = innerTxn as any;
          if (innerTxnAny['asset-config-transaction'] && innerTxnAny['created-asset-index']) {
            assetId = innerTxnAny['created-asset-index'];
            console.log("Found created asset ID:", assetId);
            break;
          }
        }
        
        if (!assetId) {
          // If not found in inner transactions, check the main transaction
          const txnResponse = confirmedTxn as any;
          console.log("Checking main transaction for asset ID");
          assetId = txnResponse['created-asset-index'] ?? txnResponse.createdAssetIndex ?? 0;
          
          if (assetId) {
            console.log("Asset created with ID:", assetId);
          } else {
            throw new Error('No asset was created in this transaction');
          }
        }
        
        return assetId;
      } catch (error: any) {
        console.error("Error during transaction signing or sending:", error);
        if (error instanceof Error) {
          console.error("Error message:", error.message);
          console.error("Error stack:", error.stack);
        }
        throw new Error(`Transaction failed: ${error?.message || safeStringify(error) || 'Unknown error'}`);
      }
    } catch (error) {
      // Enhanced error logging
      console.error('Error creating title:', error);
      
      // Log additional details about the error
      if (error instanceof Error) {
        console.error('Error message:', error.message);
        console.error('Error stack:', error.stack);
      } else {
        console.error('Unknown error type:', typeof error);
        console.error('Error stringified:', safeStringify(error));
      }
      
      // Rethrow with more context
      throw new Error(`Failed to create title: ${error instanceof Error ? error.message : safeStringify(error)}`);
    }
  }

  static async transferAsset(
    from: string,
    to: string,
    assetId: number,
    peraWallet: any
  ): Promise<string> {
    try {
      console.log(`Transferring asset ${assetId} from ${from} to ${to}`);
      const suggestedParams = await algodClient.getTransactionParams().do();
      console.log("Got suggested params:", safeStringify(suggestedParams));

      // Create the asset transfer transaction
      console.log("Creating asset transfer transaction...");
      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({
        sender: from,
        receiver: to,
        assetIndex: assetId,
        amount: 1,
        suggestedParams
      });
      console.log("Transaction created successfully");

      try {
        // Check if wallet is connected before signing
        if (!peraWallet || typeof peraWallet.signTransaction !== 'function') {
          console.error("PeraWallet not properly initialized or connected");
          console.log("PeraWallet object:", safeStringify(peraWallet));
          throw new Error('Wallet not connected or initialized properly');
        }
        
        // Sign the transaction using PeraWallet Connect
        console.log("Requesting signature from wallet...");
        console.log("About to call peraWallet.signTransaction with transaction");
        const signedTxns = await peraWallet.signTransaction([txn]);
        console.log("Transaction signed successfully", safeStringify(signedTxns));
        
        if (!signedTxns || signedTxns.length === 0) {
          throw new Error('No signed transaction returned from wallet');
        }
        
        // Send the signed transaction
        console.log("Sending signed transaction to network...");
        
        // Process the signed transactions - Pera Wallet returns the raw signed transaction bytes
        const signedTxnToSend = signedTxns[0];
        
        // Send the transaction to the network
        const txId = await algodClient.sendRawTransaction(signedTxnToSend).do();
        console.log("Transaction sent with ID:", txId.txid);
        
        // Wait for confirmation
        console.log("Waiting for confirmation...");
        const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId.txid, 4);
        console.log("Transaction confirmed:", safeStringify(confirmedTxn));
        
        return txId.txid;
      } catch (error: any) {
        console.error("Error during transaction signing or sending:", error);
        if (error instanceof Error) {
          console.error("Error message:", error.message);
          console.error("Error stack:", error.stack);
        }
        throw new Error(`Transaction failed: ${error?.message || safeStringify(error) || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Error transferring asset:', error);
      throw error;
    }
  }


  static async optInToAsset(
    account: string,
    assetId: number,
    peraWallet: any
  ): Promise<string> {
    try {
      console.log(`Opting in to asset ${assetId} for account ${account}`);
      const suggestedParams = await algodClient.getTransactionParams().do();
      console.log("Got suggested params:", safeStringify(suggestedParams));

      // Create the opt-in transaction (0 amount to self)
      console.log("Creating opt-in transaction...");
      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({
        sender: account,
        receiver: account,
        assetIndex: assetId,
        amount: 0,
        suggestedParams
      });
      console.log("Transaction created successfully");

      try {
        // Check if wallet is connected before signing
        if (!peraWallet || typeof peraWallet.signTransaction !== 'function') {
          console.error("PeraWallet not properly initialized or connected");
          console.log("PeraWallet object:", safeStringify(peraWallet));
          throw new Error('Wallet not connected or initialized properly');
        }
        
        // Sign the transaction using PeraWallet Connect
        console.log("Requesting signature from wallet...");
        console.log("About to call peraWallet.signTransaction with transaction");
        const signedTxns = await peraWallet.signTransaction([txn]);
        console.log("Transaction signed successfully", safeStringify(signedTxns));
        
        if (!signedTxns || signedTxns.length === 0) {
          throw new Error('No signed transaction returned from wallet');
        }
        
        // Send the signed transaction
        console.log("Sending signed transaction to network...");
        
        // Process the signed transactions - Pera Wallet returns the raw signed transaction bytes
        const signedTxnToSend = signedTxns[0];
        
        // Send the transaction to the network
        const txId = await algodClient.sendRawTransaction(signedTxnToSend).do();
        console.log("Transaction sent with ID:", txId.txid);
        
        // Wait for confirmation
        console.log("Waiting for confirmation...");
        const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId.txid, 4);
        console.log("Transaction confirmed:", safeStringify(confirmedTxn));
        
        return txId.txid;
      } catch (error: any) {
        console.error("Error during transaction signing or sending:", error);
        if (error instanceof Error) {
          console.error("Error message:", error.message);
          console.error("Error stack:", error.stack);
        }
        throw new Error(`Transaction failed: ${error?.message || safeStringify(error) || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Error opting in to asset:', error);
      throw error;
    }
  }
}
